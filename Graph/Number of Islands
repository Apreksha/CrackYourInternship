class Solution {
public:
    void dfs(int i,int j,vector<vector<char>>& grid,vector<vector<bool>>& visited,int n, int m){
        if(i>=n || j>=m || i<0 || j<0)
            return;
        if(grid[i][j]=='0')
            return;
        if(!visited[i][j]){
            visited[i][j]=true;
            dfs(i+1,j,grid,visited,n,m);
            dfs(i-1,j,grid,visited,n,m);
            dfs(i,j-1,grid,visited,n,m);
            dfs(i,j+1,grid,visited,n,m);
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n=grid.size(), m=grid[0].size();
        vector<vector<bool>> visited(n,vector<bool>(m,false));
        int count=0;
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1' && visited[i][j]==false){
                    dfs(i,j,grid,visited,n,m);
                    count++;
                }
            }
        }
        return count;
    }
};
