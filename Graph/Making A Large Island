class Solution {
public:
    
    bool isValid(int i,int j,int n){
        if(i>=0 && j>=0 && i<n && j<n)
            return true;
        return false;
    }
    
    int dfs(vector<vector<int>>& grid, int num, int i, int j, int n){

        if(!isValid(i, j, n) || grid[i][j]!=1)
            return 0;
        
        grid[i][j]=num;    
        return dfs(grid, num, i+1, j, n) +
            dfs(grid, num, i-1, j, n) +
            dfs(grid, num, i, j+1, n) +
            dfs(grid, num, i, j-1, n) + 1;
    }

    int largestIsland(vector<vector<int>>& grid) {
        int n=grid.size(), maxarea=INT_MIN, num=2;
        vector<int> find(n*n+2);
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    int area=dfs(grid, num, i, j, n);
                    find[num]=area;
                    num++;
                    maxarea=max(area,maxarea);
                }
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0){
                    set<int>st;
                    if(isValid(i+1,j,n))
                        st.insert(grid[i+1][j]);
                    if(isValid(i-1,j,n))
                        st.insert(grid[i-1][j]);
                    if(isValid(i,j+1,n))
                        st.insert(grid[i][j+1]);
                    if(isValid(i,j-1,n))
                        st.insert(grid[i][j-1]);
                    int sum=1;
                    for(auto it:st)
                        sum+=find[it];
                    maxarea=max(maxarea,sum);
                }
            }
        }
        
        return maxarea;
    }
};
